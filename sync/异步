

并发编程

大部分编程语言 采取共享数据的形式 来传递信息和协调线程
一旦数据被共享 那么就有可能出现 竞争的情况 往往会破坏数据的一致性

所以 这时候需要一种机制 保证多个线程同时改动相同数据 能产生正确的预期效果
也就是同步 1.避免同一时刻不同线程操作同一数据块2.避免同一时刻不同线程执行同一代码块

这些数据和代码 都可以视为一种共享资源


一个线程想要访问一个共享资源时 需要发起申请对资源的访问权限 并且成功之后才能操作 操作完成后归还权限

一个被共享待被多个线程访问的数据或者代码为临界区
可以看成一个数据结构 包含 共享数据 和权限令牌

死锁： 主goroutine和自己启用的goroutine都阻塞了 程序无法继续执行

Go中实现同步的工具

1.Mutex信号量，互斥锁

每个goroutine想进入临界区都要锁定mutex 离开时解锁
Lock Unlock 函数

互斥锁使用注意：
1.不要重复锁定  会导致当前goroutine阻塞在lock函数
2.不要忘记解锁  在锁定之后defer 解锁 最安全
3.不要解锁不符合要求的锁
4.不要多个函数传递锁  Mutex是值传递的传递过程中可能会生成它的副本 产生了不同的互斥锁
5.尽量一个锁保护一个临界区或一组相关临界区


2.读写锁  -读写互斥锁 sync.RWMutex

对读写进行保护 更加细腻更加适合


分为读锁 RLock RUnLock
分为写锁 Lock UnLock

多个写操作不能同时进行  多个读操作能同时进行

对读写操作区别对待 决定了其读写锁 不同情况的处理